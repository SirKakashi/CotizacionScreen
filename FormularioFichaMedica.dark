import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:signature/signature.dart';
import 'dart:async';

class MyForm extends StatefulWidget {
  @override
  _MyFormState createState() => _MyFormState();
}

class _MyFormState extends State<MyForm> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  String _name = '';
  bool _agreedToTerms = false;
  String _selectedItem = '';
  SignatureController _signatureController = SignatureController(
    penStrokeWidth: 5,
    penColor: Colors.black,
    exportBackgroundColor: Colors.white,
  );

  @override
  Widget build(BuildContext context) {
    Completer<Uint8List> completer = Completer<Uint8List>();
    return Scaffold(
      appBar: AppBar(
        title: Text('Form Example'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: EdgeInsets.all(16),
          children: [
            TextFormField(
              decoration: InputDecoration(labelText: 'Name'),
              validator: (String? value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Name is required';
                }
                return null;
              },
              onSaved: (String? value) {
                if (value != null) {
                  _name = value;
                }
              },
            ),
            CheckboxListTile(
              title: Text('I agree to the terms and conditions'),
              value: _agreedToTerms,
              onChanged: (bool? newValue) {
                if (newValue != null) {
                  setState(() {
                    _agreedToTerms = newValue;
                  });
                }
              },
            ),
            DropdownButtonFormField<String>(
              decoration: InputDecoration(labelText: 'Item'),
              items: ['Item 1', 'Item 2', 'Item 3']
                  .map((label) => DropdownMenuItem(
                child: Text(label),
                value: label,
              ))
                  .toList(),
              onChanged: (String? newValue) {
                if (newValue != null) {
                  setState(() {
                    _selectedItem = newValue;
                  });
                }
              },
            ),
            SizedBox(height: 16),
            Signature(
              controller: _signatureController,
              height: 200,
              backgroundColor: Colors.white10,
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                if (_formKey.currentState != null &&
                    _formKey.currentState!.validate()) {
                  _formKey.currentState!.save();
                  final pdf = pw.Document();

                  // Obtener bytes de la imagen
                  final signatureBytes = await _signatureController.toPngBytes();

                  pdf.addPage(pw.Page(
                    build: (pw.Context context) => pw.Column(children: [
                      pw.Text('Name: $_name'),
                      pw.Text('Agreed to terms and conditions? $_agreedToTerms'),
                      pw.Text('Selected item: $_selectedItem'),
                      pw.Text('Signature:'),
                      pw.Image(
                          signatureBytes != null
                              ? pw.MemoryImage(signatureBytes)
                              : pw.MemoryImage(Uint8List(0)), // Usar una lista vacÃ­a si signatureBytes es nulo
                          width: 200,
                          height: 100),
                    ]),
                  ));
                  await Printing.layoutPdf(
                    onLayout: (PdfPageFormat format) async => pdf.save(),
                  );
                }
              },
              child: Text('Submit'),
            ),




          ],
        ),
      ),
    );
  }
}
