este codigo cuenta con un textfiel que ayuda al usuario a buscar por "name" ahora agregaremos un dropdown para que tambien pueda filtrar por "clase" . dame DAME TODO EL CODIGO ACTUALIZADO :import 'package:flutter/material.dart';
import 'package:qualitylab_ride/screens/MenuScreen.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter/rendering.dart';
import 'package:cloud_firestore/cloud_firestore.dart';




class CotizacionScreen extends StatefulWidget {
  @override

  _CotizacionScreenState createState() => _CotizacionScreenState();
  static const String pdfUrl = 'https://firebasestorage.googleapis.com/v0/b/qualitylabride.appspot.com/o/CatalogoQualityLab.pdf?alt=media&token=bd529425-b16f-4726-b0eb-ec45c406f1b5';

}

class _CotizacionScreenState extends State<CotizacionScreen> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _filteredProducts = [];
  bool _isLoading = false;
  bool _isSuccess = false;
  List<Map<String, dynamic>> _products = []; // Definir la lista aqu√≠


  @override
  void initState() {
    super.initState();
    _fetchProducts();
  }

  void _filterProducts(String query) {
    List<Map<String, dynamic>> filteredProducts = [];
    if (query.isNotEmpty) {
      for (final product in _products) {
        if (product['name'].toLowerCase().contains(query.toLowerCase())) {
          filteredProducts.add(product);
        }
      }
    } else {
      filteredProducts.addAll(_products);
    }
    setState(() {
      _filteredProducts = filteredProducts;
    });
  }



  void _fetchProducts() async {
    setState(() {
      _isLoading = true;
    });
    try {
      final productsRef = FirebaseFirestore.instance.collection('products');
      final snapshot = await productsRef.get();
      final productsData = snapshot.docs.map((doc) => doc.data()).toList();
      setState(() {
        _products = productsData;
        _filteredProducts = productsData;
      });
    } catch (e) {
      print(e.toString());
      setState(() {
        _isSuccess = false;
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }





  @override
  Widget build(BuildContext context) {
    SystemChrome.setEnabledSystemUIOverlays([]);
    return Scaffold(
      backgroundColor: Colors.white,

      body: SingleChildScrollView(
        padding: EdgeInsets.only(top: MediaQuery
            .of(context)
            .size
            .height * 0.00),

        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,

          children: [
            Container(
              alignment: Alignment.topLeft,
              //height: MediaQuery.of(context).size.height * 0.05,
              width: MediaQuery.of(context).size.width * 1.0,
              child: IconButton(
                alignment: Alignment.topLeft,

                icon: Icon(Icons.download),


                onPressed: () async {
                  showDialog(
                    context: context,
                    builder: (BuildContext context) {
                      return AlertDialog(
                        title: Text('Descargar'),
                        content: Text('desea descargar nuestro catalogo completo?'),
                        actions: <Widget>[
                          TextButton(
                            child: Text('Descargar'),
                            onPressed: () async{
                              String pdfUrl = 'https://firebasestorage.googleapis.com/v0/b/qualitylabride.appspot.com/o/CatalogoQualityLab.pdf?alt=media&token=bd529425-b16f-4726-b0eb-ec45c406f1b5';
                              if (await canLaunch(pdfUrl)) {
                                await launch(pdfUrl);
                              } else {
                                throw 'Could not launch $pdfUrl';
                              }
                            },
                          ),
                        ],
                      );
                    },
                  );
                },
              ),

            ),
            Container(
              //height: MediaQuery.of(context).size.height * 0.05,
              width: MediaQuery
                  .of(context)
                  .size
                  .width * 1.0,
              child: Image.asset('lib/config/images/logo5.jpg',
                  fit: BoxFit.cover
              ),
            ),
            SizedBox(height: 0),

            SingleChildScrollView(
              child: Container(

                decoration: BoxDecoration(

                  borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(30),
                      topRight: Radius.circular(30),
                      bottomRight: Radius.circular(30),
                      bottomLeft: Radius.circular(30)),
                  gradient: LinearGradient(colors: [
                    Color(0xFF01163D),
                    //Color(0xFF58A1FD),
                    Color(0xFF01163D),
                  ]),
                  border: Border.all(
                    color: Colors.white, // color del borde
                    width: 2.0, // ancho del borde
                  ),
                ),

                padding: EdgeInsets.only(
                    top: MediaQuery.of(context).size.height * 0.02,
                    bottom: MediaQuery.of(context).size.height * 0.02,
                    left: MediaQuery.of(context).size.width * 0.05,
                    right: MediaQuery.of(context).size.width * 0.05),

                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,

                  children: [

                    SizedBox(height: 20),
                    Text(
                        'Examenes a Cotizar:',
                        style: TextStyle(
                            color: Colors.white,
                            fontSize:
                            MediaQuery.of(context).size.height * 0.025,
                            fontWeight: FontWeight.bold)),
                    SizedBox(height: 10),
                    ///////////////////////////////////////////////////////////////////////////
                    Container(
                      padding: EdgeInsets.only(left: MediaQuery.of(context).size.width * 0.08 ),

                      height: MediaQuery.of(context).size.height * 0.04,
                      decoration: const BoxDecoration(

                        borderRadius: BorderRadius.all(Radius.circular(15)),
                        color: Colors.white,

                      ),

                    ),
                    Container(
                      padding: EdgeInsets.only(left: MediaQuery.of(context).size.width * 0.08 ),

                      height: MediaQuery.of(context).size.height * 0.04,
                      decoration: const BoxDecoration(

                        borderRadius: BorderRadius.all(Radius.circular(15)),
                        color: Colors.white,

                      ),
                      child: Center(
                        child: TextField(

                          controller: _searchController,
                          decoration: InputDecoration(
                            hintText: 'Buscar',
                            hintStyle: TextStyle(color: Colors.black87),

                          ),
                          style: TextStyle(color: Colors.black87),

                          onChanged: (query) => _filterProducts(query),
                        ),

                      ),
                    ),


                    SingleChildScrollView(
                      padding: EdgeInsets.only(
                          top: MediaQuery.of(context).size.height * 0.02,
                          bottom: MediaQuery.of(context).size.height * 0.02,
                          left: MediaQuery.of(context).size.width * 0.05,
                          right: MediaQuery.of(context).size.width * 0.30),
                      child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: _filteredProducts.length,
                        itemBuilder: (context, index) {
                          final product = _filteredProducts[index];
                          return Row(
                            children: [
                              Checkbox(
                                value: product['selected'],
                                onChanged: (value) {
                                  setState(() {
                                    product['selected'] = value;
                                  });
                                },
                                checkColor: Colors.white,
                                activeColor: Colors.green,
                              ),
                              Text(
                                '${product['name']} - \$${product['price']}',
                                style: TextStyle(
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          );
                        },
                      ),



                    ),
                    Padding(
                      padding: EdgeInsets.only(
                          top: MediaQuery.of(context).size.height * 0.05),
                      child: SizedBox(
                        width: double.infinity,
                        child: Column(
                          children: [
                            InkWell(
                              onTap: () async {
                                _showDialog();
                              },
                              child: Container(
                                height: MediaQuery.of(context).size.height * 0.05,
                                decoration: const BoxDecoration(
                                    borderRadius:
                                    BorderRadius.all(Radius.circular(15)),
                                    gradient: LinearGradient(colors: [
                                      Colors.redAccent,
                                      Colors.red,
                                    ])),
                                child: Center(
                                  child: Text(
                                      'Cotizar',
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontSize:
                                          MediaQuery.of(context).size.height * 0.016,
                                          fontWeight: FontWeight.bold)),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),


          ],


        ),

      ),
    );
  }

  void _showDialog() {

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('¬°Listo!'),
          content: Text('Asegurece De Haber Seleccionado Todo Lo Que Desea Cotizar'),

          actions: [
            TextButton(
              child: Text('Confirmar Cotizacion'),
              onPressed: () async {
                List<String> selectedProducts = [];
                num total = 0;

                for (var product in _products) {
                  if (product['selected']) {
                    selectedProducts.add('${product['name']} (\$${product['price']})');
                    total += product['price'].toInt();
                  }
                }


                String quotation = selectedProducts.join(', ');


                setState(() {
                  _isLoading = true;
                  _showDialog();
                });






                setState(() {
                  _isLoading = false;
                  _isSuccess = true;

                });


                for (var product in _products) {
                  product['selected'] = false;
                }

                _showDialogfinal(quotation,total);



              },
            ),
          ],
        );
      },
    );
  }

  void _showDialogfinal(String quotation,num total) {
    // Dividir la cadena de cotizaci√≥n en una lista de productos
    List<String> productos = quotation.split(",");

    // Construir la cadena de texto con los productos separados por saltos de l√≠nea
    String productosStr = productos.join("\n");
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('¬°Su Cotizacion!'),
          content: Text('\nSu Cotizacion Consta De:\n \n $productosStr \n \n \n Valor Total: $total '),
          actions: [
            TextButton(
              child: Text('Volver al Inicio'),
              onPressed: () async {


                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => MenuScreen()),
                );


              },
            ),
            TextButton(
              child: Text('Enviar Cotizacion'),
              onPressed: () async {
                String url = 'https://wa.me/+5930983975167?text=\nSu Cotizacion Consta De:\n  $productosStr \n \n  Valor Total: $total ';
                if (await canLaunch(url)) {
                  await launch(url);
                } else {
                  throw 'No se pudo abrir WhatsApp.';
                }



                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => MenuScreen()),
                );


              },
            ),
          ],
        );
      },
    );
  }


}
